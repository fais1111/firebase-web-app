/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership and role-based access control where appropriate.
 * It avoids complex data validation to allow for rapid schema iteration during the prototyping phase.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles. Accessible only to the owner.
 * - /accident_reports/{reportId}: Stores accident reports. Accessible only to authenticated users.
 * - /admin_locations/{locationId}: Stores curated admin locations. Accessible only to authenticated users.
 * - /accident_guides/{guideId}: Stores accident management guides. Accessible only to authenticated users.
 *
 * Key Security Decisions:
 * - No user listing is allowed to prevent data scraping.
 * - Data validation is minimized to focus on authorization and relationship integrity.
 * - The rules explicitly deny any potentially unsafe operations.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization is used in this prototype.
 *
 * Structural Segregation:
 *  N/A - No structural segregation is used in this prototype.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can create their own profile.
     * @deny (create) User jcQlCDKhymRLjV2gJjgAN7bXAzi3 cannot create profile for user jcQlCDKhymRLjV2gJjgAN7bXAzi2.
     * @allow (get, list) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can read their own profile.
     * @deny (get, list) User jcQlCDKhymRLjV2gJjgAN7bXAzi3 cannot read profile of user jcQlCDKhymRLjV2gJjgAN7bXAzi2.
     * @allow (update) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can update their own profile.
     * @deny (update) User jcQlCDKhymRLjV2gJjgAN7bXAzi3 cannot update profile of user jcQlCDKhymRLjV2gJjgAN7bXAzi2.
     * @allow (delete) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can delete their own profile.
     * @deny (delete) User jcQlCDKhymRLjV2gJjgAN7bXAzi3 cannot delete profile of user jcQlCDKhymRLjV2gJjgAN7bXAzi2.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to accident reports. Only authenticated users can create.
     * @path /accident_reports/{reportId}
     * @allow (create) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can create a report.
     * @deny (create) Unauthenticated user cannot create a report.
     * @allow (get, list) Any authenticated user can read any report.
     * @deny (update, delete) Only the report creator should be able to modify/delete.
     * @principle Restricts write access to authenticated users.
     */
    match /accident_reports/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Restricts access to admin locations.
     * @path /admin_locations/{locationId}
     * @allow (create) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can create an admin location.
     * @deny (create) Unauthenticated user cannot create an admin location.
     * @allow (get, list) Any authenticated user can read any admin location.
     * @deny (update, delete) Only the location creator should be able to modify/delete.
     * @principle Restricts write access to authenticated users.
     */
    match /admin_locations/{locationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to accident guides.
     * @path /accident_guides/{guideId}
     * @allow (create) User jcQlCDKhymRLjV2gJjgAN7bXAzi2 can create an accident guide.
     * @deny (create) Unauthenticated user cannot create an accident guide.
     * @allow (get, list) Any authenticated user can read any accident guide.
     * @deny (update, delete) Only the guide creator should be able to modify/delete.
     * @principle Restricts write access to authenticated users.
     */
    match /accident_guides/{guideId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}