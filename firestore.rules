/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model, balancing open access to resources with strict ownership and role-based restrictions where necessary.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}` and are only accessible to the owning user.
 * - Accident reports, admin locations, accident guides, therapists, appointments, and mental health resources are stored in top-level collections.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed for privacy, except where explicitly required and secured (e.g., therapists).
 * - Public read access is granted to mental health resources, accident guides, and admin locations to promote general awareness and safety.
 * - Accident reports and appointments have write operations restricted to ensure proper authorization, but are open for read.
 *
 * Denormalization for Authorization:
 *   (Not applicable in this simplified model, but consider adding `userId` to accident reports or appointments for simplified owner-based rules in the future.)
 *
 * Structural Segregation:
 *   (Not applicable, but consider separating "draft" vs. "published" content into different collections if needed in the future.)
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create, get, list, update, delete) - Any other user cannot access /users/user123.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to accident reports.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Any authenticated user can list and get accident reports.
     * @allow (create) - Any authenticated user can create an accident report.
     * @deny (update, delete) - Only the owner can update or delete the accident report.
     * @principle Allows public read access to accident reports while restricting write access.
     */
    match /accident_reports/{reportId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to admin locations.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Any user can read admin locations.
     * @deny (create, update, delete) - No user can create, update or delete admin locations.
     * @principle Allows public read access to admin locations.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to accident guides.
     * @path /accident_guides/{guideId}
     * @allow (get, list) - Any user can read accident guides.
     * @deny (create, update, delete) - No user can create, update or delete accident guides.
     * @principle Allows public read access to accident guides.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to therapist data.
     * @path /therapists/{therapistId}
     * @allow (get, list) - Any user can read therapist information.
     * @deny (create, update, delete) - No user can create, update or delete therapist data.
     * @principle Allows public read access to therapists.
     */
    match /therapists/{therapistId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to appointments.
     * @path /appointments/{appointmentId}
     * @allow (get, list) - Any authenticated user can list and get appointments.
     * @allow (create) - Any authenticated user can create an appointment.
     * @deny (update, delete) - Only the owner can update or delete the appointment.
     */
    match /appointments/{appointmentId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to mental health resources.
     * @path /mental_health_resources/{resourceId}
     * @allow (get, list) - Any user can read mental health resources.
     * @deny (create, update, delete) - No user can create, update or delete mental health resources.
     * @principle Allows public read access to mental health resources.
     */
    match /mental_health_resources/{resourceId} {
        function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}