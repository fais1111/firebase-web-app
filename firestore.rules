/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default approach, focusing on user-owned data and
 * role-based access control.  It enforces strict ownership for user-specific data while
 * allowing public read access for certain collections like mental health resources. Data
 * validation is minimized to enable rapid prototyping.
 *
 * Data Structure:
 * The Firestore database is organized into a set of top-level collections. Some collections
 * such as `users`, `accident_reports`, `cyber_security_incidents`, `disaster_reports`, and `sos_reports`
 * store data associated with individual users. Other collections such as `admin_locations`,
 * `accident_guides`, `therapists`, `mental_health_resources`, and `safe_zones` store
 * application-wide data.
 *
 * Key Security Decisions:
 * - User profiles (`/users/{userId}`) are private and only accessible to the owning user.
 * - Listing of users is denied to prevent enumeration.
 * - Public read access is granted to collections like `mental_health_resources`.
 * - All write operations require authentication.
 *
 * Denormalization for Authorization:
 * To keep rules simple and efficient and avoid costly `get()` operations, authorization
 * decisions are based on data directly available within the document being secured. For
 * example, accident reports include the `userId` to allow simple ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces that only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'abc' can create their profile if request.auth.uid == 'abc'.
     * @allow (get, list, update, delete) - User 'abc' can read/write their profile if request.auth.uid == 'abc'.
     * @deny (create) - User 'def' cannot create a profile with ID 'abc'.
     * @deny (get, list, update, delete) - User 'def' cannot read/write user 'abc' profile.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows logged in users to create accident reports. Enforces ownership.
     * @path /accident_reports/{reportId}
     * @allow (create) - User 'abc' can create a report with userId 'abc'.
     * @allow (get, list) - Any logged in user can get, or list all the accident reports
     * @allow (update, delete) - User 'abc' can update or delete a report with userId 'abc'.
     * @deny (create) - User 'abc' cannot create a report with userId 'def'.
     * @deny (update, delete) - User 'def' cannot update or delete report with userId 'abc'.
     * @principle Enforces document ownership for writes.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(reportId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/accident_reports/' + reportId)).data.userId;
      }

      function isExistingOwner(reportId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/accident_reports/' + reportId)).data.userId && resource.data != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/accident_reports/' + reportId)).data.userId;
      allow delete: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/accident_reports/' + reportId)).data.userId;
    }

    /**
     * @description Allows read access to admin locations, but restricts write access.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Any user can read admin locations.
     * @deny (create, update, delete) - No user can create, update, or delete admin locations via client.
     * @principle Restricts write access to admins only (currently denied).
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to accident guides, but restricts write access.
     * @path /accident_guides/{guideId}
     * @allow (get, list) - Any user can read accident guides.
     * @deny (create, update, delete) - No user can create, update, or delete accident guides.
     * @principle Provides public information, restricts write access to admins only (currently denied).
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows read access to therapists, but restricts write access.
     * @path /therapists/{therapistId}
     * @allow (get, list) - Any user can read therapist information.
     * @deny (create, update, delete) - No user can create, update, or delete therapist data via client.
     * @principle Allows public information about therapists, restricts write access to admins only (currently denied).
     */
    match /therapists/{therapistId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows logged in users to create appointments.  Enforces ownership.
     * @path /appointments/{appointmentId}
     * @allow (create) - User 'abc' can create an appointment with userId 'abc'.
     * @allow (get, list) - Any logged in user can get, or list all the appointments.
     * @allow (update, delete) - User 'abc' can update or delete an appointment with userId 'abc'.
     * @deny (create) - User 'abc' cannot create an appointment with userId 'def'.
     * @deny (update, delete) - User 'def' cannot update or delete an appointment with userId 'abc'.
     * @principle Enforces document ownership for writes.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(appointmentId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/appointments/' + appointmentId)).data.userId;
      }

      function isExistingOwner(appointmentId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/appointments/' + appointmentId)).data.userId && resource.data != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/appointments/' + appointmentId)).data.userId;
      allow delete: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/appointments/' + appointmentId)).data.userId;
    }

    /**
     * @description Allows public read access to mental health resources, but restricts write access.
     * @path /mental_health_resources/{resourceId}
     * @allow (get, list) - Any user can read mental health resources.
     * @deny (create, update, delete) - No user can create, update, or delete resources.
     * @principle Provides public information, restricts write access to admins only (currently denied).
     */
    match /mental_health_resources/{resourceId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows logged in users to create cyber security incidents.  Enforces ownership.
     * @path /cyber_security_incidents/{incidentId}
     * @allow (create) - User 'abc' can create an incident with userId 'abc'.
     * @allow (get, list) - Any logged in user can get, or list all the cyber security incidents.
     * @allow (update, delete) - User 'abc' can update or delete an incident with userId 'abc'.
     * @deny (create) - User 'abc' cannot create an incident with userId 'def'.
     * @deny (update, delete) - User 'def' cannot update or delete an incident with userId 'abc'.
     * @principle Enforces document ownership for writes.
     */
    match /cyber_security_incidents/{incidentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(incidentId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/cyber_security_incidents/' + incidentId)).data.userId;
      }

      function isExistingOwner(incidentId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/cyber_security_incidents/' + incidentId)).data.userId && resource.data != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/cyber_security_incidents/' + incidentId)).data.userId;
      allow delete: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/cyber_security_incidents/' + incidentId)).data.userId;
    }

        /**
     * @description Allows logged in users to create disaster reports.  Enforces ownership.
     * @path /disaster_reports/{reportId}
     * @allow (create) - User 'abc' can create a report with userId 'abc'.
     * @allow (get, list) - Any logged in user can get, or list all the disaster reports.
     * @allow (update, delete) - User 'abc' can update or delete a report with userId 'abc'.
     * @deny (create) - User 'abc' cannot create a report with userId 'def'.
     * @deny (update, delete) - User 'def' cannot update or delete a report with userId 'abc'.
     * @principle Enforces document ownership for writes.
     */
    match /disaster_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(reportId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/disaster_reports/' + reportId)).data.userId;
      }

      function isExistingOwner(reportId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/disaster_reports/' + reportId)).data.userId && resource.data != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/disaster_reports/' + reportId)).data.userId;
      allow delete: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/disaster_reports/' + reportId)).data.userId;
    }

    /**
     * @description Allows logged in users to create SOS reports.  Enforces ownership.
     * @path /sos_reports/{reportId}
     * @allow (create) - User 'abc' can create a report with userId 'abc'.
     * @allow (get, list) - Any logged in user can get, or list all the SOS reports.
     * @allow (update, delete) - User 'abc' can update or delete a report with userId 'abc'.
     * @deny (create) - User 'abc' cannot create a report with userId 'def'.
     * @deny (update, delete) - User 'def' cannot update or delete a report with userId 'abc'.
     * @principle Enforces document ownership for writes.
     */
    match /sos_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(reportId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/sos_reports/' + reportId)).data.userId;
      }

      function isExistingOwner(reportId) {
        return request.auth != null && request.auth.uid == get(path('/databases/' + database + '/documents/sos_reports/' + reportId)).data.userId && resource.data != null;
      }
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/sos_reports/' + reportId)).data.userId;
      allow delete: if isSignedIn() && request.auth.uid == get(path('/databases/' + database + '/documents/sos_reports/' + reportId)).data.userId;
    }

    /**
     * @description Allows read access to safe zones, but restricts write access.
     * @path /safe_zones/{zoneId}
     * @allow (get, list) - Any user can read safe zones.
     * @deny (create, update, delete) - No user can create, update, or delete safe zones.
     * @principle Allows public information, restricts write access to admins only (currently denied).
     */
    match /safe_zones/{zoneId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}