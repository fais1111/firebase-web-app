/**
 * @file Firestore Security Rules
 * @description This ruleset defines access control for the Firestore database based on a user-ownership model and role-based authorization.
 *
 * Core Philosophy:
 *  - Strict user-ownership: Users can only read and write their own data in user-specific collections (e.g., /users/{userId}).
 *  - Public read access: Certain collections (e.g., /accident_guides, /mental_health_resources) are publicly readable.
 *  - Admin role:  The rules do not explicitly define admin roles, because the functionality is not availble in the IR.
 *  - Data validation: Input data is not heavily validated in this prototyping phase. Only authorization-critical fields are checked.
 *
 * Data Structure:
 *  - /users/{userId}: Stores user profiles.  Only the user can read/write their own profile.
 *  - /accident_reports/{reportId}: Stores accident reports.  Publicly readable, but create/update/delete are restricted to the owner (userId) of the report.
 *  - /admin_locations/{locationId}: Stores admin-defined accident locations. Publicly readable, write access not granted.
 *  - /accident_guides/{guideId}: Stores accident guides.  Publicly readable, write access not granted.
 *  - /therapists/{therapistId}: Stores therapist information. Publicly readable, write access not granted.
 *  - /appointments/{appointmentId}: Stores appointment bookings. Publicly readable, write access not granted.
 *  - /mental_health_resources/{resourceId}: Stores mental health resources.  Publicly readable, write access not granted.
 *  - /cyber_security_incidents/{incidentId}: Stores cyber security incident reports.  Publicly readable, but create/update/delete are restricted to the owner (userId) of the report.
 *  - /disaster_reports/{reportId}: Stores disaster reports. Publicly readable, but create/update/delete are restricted to the owner (userId) of the report.
 *  - /sos_reports/{reportId}: Stores SOS reports. Publicly readable, but create/update/delete are restricted to the owner (userId) of the report.
 *  - /safe_zones/{zoneId}: Stores safe zone locations.  Publicly readable, write access not granted.
 *
 * Key Security Decisions:
 *  - User listing is disabled to prevent unauthorized data access.
 *  - Public read access is granted to certain collections containing general information.
 *  - Write access to several collections is restricted based on user ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) User with UID 'user123' can read their profile.
     * @deny (create) User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile for 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to accident reports.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read accident reports.
     * @allow (create) User with UID 'user123' can create a report with userId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a report with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the report with userId 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /accident_reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to admin-defined locations.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read admin locations.
     * @deny (create) No one can create admin locations through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to accident guides.
     * @path /accident_guides/{guideId}
     * @allow (get) Any user can read accident guides.
     * @deny (create) No one can create accident guides through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to therapist information.
     * @path /therapists/{therapistId}
     * @allow (get) Any user can read therapist information.
     * @deny (create) No one can create therapist information through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /therapists/{therapistId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to appointment bookings.
     * @path /appointments/{appointmentId}
     * @allow (get) Any user can read appointment bookings.
     * @deny (create) No one can create appointment bookings through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /appointments/{appointmentId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to mental health resources.
     * @path /mental_health_resources/{resourceId}
     * @allow (get) Any user can read mental health resources.
     * @deny (create) No one can create mental health resources through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /mental_health_resources/{resourceId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to cyber security incident reports.
     * @path /cyber_security_incidents/{incidentId}
     * @allow (get) Any user can read cyber security incident reports.
     * @allow (create) User with UID 'user123' can create a report with userId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a report with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the report with userId 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /cyber_security_incidents/{incidentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to disaster reports.
     * @path /disaster_reports/{reportId}
     * @allow (get) Any user can read disaster reports.
     * @allow (create) User with UID 'user123' can create a report with userId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a report with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the report with userId 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /disaster_reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to SOS reports.
     * @path /sos_reports/{reportId}
     * @allow (get) Any user can read SOS reports.
     * @allow (create) User with UID 'user123' can create a report with userId 'user123'.
     * @deny (create) User with UID 'user456' cannot create a report with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update the report with userId 'user123'.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /sos_reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Controls access to safe zones.
     * @path /safe_zones/{zoneId}
     * @allow (get) Any user can read safe zones.
     * @deny (create) No one can create safe zones through client-side rules.
     * @principle Allows public read access but restricts write access.
     */
    match /safe_zones/{zoneId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}