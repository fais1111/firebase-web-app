/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and skipping data validation.
 * It uses a strict owner-only access model for user-specific data and allows public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owner.
 * - /accident_reports/{reportId}: Stores accident reports. Public read, owner-only writes.
 * - /admin_locations/{locationId}: Stores admin-curated accident locations. Public read.
 * - /accident_guides/{guideId}: Stores accident guides. Public read.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Public read access is granted to the accident_reports, admin_locations and accident_guides collections.
 * - Data validation is skipped to allow for flexible schema changes during prototyping.
 *
 * Denormalization for Authorization:
 * - Accident reports require the `userId` field to match `request.auth.uid` for write operations, this id is also used as the report's owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access for user profiles.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' can create their profile.
     * @allow (get, list) User with uid 'user123' can read their own profile.
     * @allow (update, delete) User with uid 'user123' can update/delete their own profile.
     * @deny (create) User with uid 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, list) User with uid 'user456' cannot read profile with ID 'user123'.
     * @deny (update, delete) User with uid 'user456' cannot update/delete profile with ID 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to accident reports, but restricts writes to the owner.
     * @path /accident_reports/{reportId}
     * @allow (get, list) Any user (signed in or not) can read accident reports.
     * @allow (create) User with uid 'user123' can create an accident report with userId 'user123'.
     * @allow (update, delete) User with uid 'user123' can update/delete their own accident report.
     * @deny (create) User with uid 'user456' cannot create an accident report with userId 'user123'.
     * @deny (update, delete) User with uid 'user456' cannot update/delete accident report with userId 'user123'.
     * @principle Allows public read access while enforcing owner-only access for writes.
     */
    match /accident_reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Allows public read access to admin-curated accident locations.
     * @path /admin_locations/{locationId}
     * @allow (get, list) Any user (signed in or not) can read admin locations.
     * @deny (create, update, delete) No user can create, update, or delete admin locations.
     * @principle Provides read-only access to accident locations for all users.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to accident management guides.
     * @path /accident_guides/{guideId}
     * @allow (get, list) Any user (signed in or not) can read accident guides.
     * @deny (create, update, delete) No user can create, update, or delete accident guides.
     * @principle Provides read-only access to accident guides for all users.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}