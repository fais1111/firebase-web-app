/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles,
 *              allows users to create accident reports with userId matching their own,
 *              and permits public read access to accident reports and admin locations while restricting modifications to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information, accessible only to the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports, publicly readable but writable only with correct user ID.
 * - /admin_locations/{locationId}: Stores admin-curated locations, publicly readable and writable only by authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Accident reports are publicly readable to facilitate data sharing and analysis, but ownership is enforced for writes.
 * - Listing users is disallowed to prevent enumeration.
 * - Admin locations are readable by all, with write access restricted to authenticated users.
 *
 * Denormalization for Authorization:
 * - Accident reports include the `userId` field to allow for easy ownership checks without additional `get()` calls.
 *
 * Structural Segregation:
 * - Public accident reports and private user profiles are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get, update, delete) User with ID 'user123' can read/update/delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @deny (get, update, delete) User with ID 'user456' cannot read/update/delete profile for 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      //function isSignedIn() {
        //return request.auth != null;
      //}
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing of all users
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to accident report documents.
     * @path /accident_reports/{reportId}
     * @allow (get, list) Any user can read accident reports.
     * @allow (create) User with ID 'user123' can create a report with userId: 'user123'.
     * @allow (update, delete) User with ID 'user123' can update/delete a report where accident report's userId is 'user123'.
     * @deny (create) User with ID 'user456' cannot create a report with userId: 'user123'.
     * @deny (update, delete) User with ID 'user456' cannot update/delete report where accident report's userId is 'user123'.
     * @principle Allows public read access but enforces document ownership for writes.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to admin location documents.
     * @path /admin_locations/{locationId}
     * @allow (get, list) Any user can read admin locations.
     * @allow (create, update, delete) Only authenticated users can create, update, or delete admin locations.
     * @deny (create, update, delete) Unauthenticated users cannot create, update, or delete admin locations.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /admin_locations/{locationId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }
}