/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for user profiles,
 *              allows public read access with owner-only writes for accident reports,
 *              and restricts access to admin locations to authenticated users.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports. Publicly readable, but only the user who created the report can modify or delete it.
 * - /admin_locations/{locationId}: Stores accident hotspots, accessible only to authenticated users.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Accident reports are publicly readable, but only the report creator can modify them.
 * - Admin locations are readable and writable by any authenticated user.
 *
 * Denormalization for Authorization:
 * - Accident reports include a `userId` field to enforce owner-only write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can access their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Authenticated user with UID matching the userId.
     *          Example: User 'user123' can (get, create, update, delete) document /users/user123.
     * @deny (get, create, update, delete): Authenticated user with UID not matching the userId.
     *          Example: User 'user456' cannot (get, create, update, delete) document /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      //  function
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requested user ID matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages accident reports, allowing public read access and owner-only writes.
     * @path /accident_reports/{reportId}
     * @allow (get, list): Any user can read accident reports.
     * @allow (create): Authenticated user creating a report with their userId.
     *          Example: User 'user123' can create a report with userId 'user123'.
     * @allow (update, delete): Authenticated user who owns the report.
     *          Example: User 'user123' can (update, delete) a report with userId 'user123'.
     * @deny (create): Authenticated user creating a report with a mismatched userId.
     *          Example: User 'user123' cannot create a report with userId 'user456'.
     * @deny (update, delete): Authenticated user who does not own the report.
     *          Example: User 'user456' cannot (update, delete) a report with userId 'user123'.
     * @principle Allows public read access but restricts writes to the report owner.
     */
    match /accident_reports/{reportId} {
      //  function
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the authenticated user is the owner of the accident report.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the existing owner of the accident report.
      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages admin locations, restricting access to authenticated users.
     * @path /admin_locations/{locationId}
     * @allow (get, list, create, update, delete): Any authenticated user can manage admin locations.
     * @deny (get, list, create, update, delete): Unauthenticated users cannot access admin locations.
     * @principle Requires authentication for all operations.
     */
    match /admin_locations/{locationId} {
      //  function
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list, create, update, delete: if isSignedIn();
    }
  }
}