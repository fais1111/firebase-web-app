/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles and allows public read access to accident reports and admin locations, with ownership-based write access for accident reports.
 * @data_structure
 *  - /users/{userId}: Stores public user profile data.
 *  - /accident_reports/{reportId}: Stores accident reports submitted by users.
 *  - /admin_locations/{locationId}: Stores accident hotspots curated by administrators.
 * @key_security_decisions
 *  - Users can only read and write their own profile data.
 *  - Accident reports are publicly readable but only the owner can create, update, or delete them.
 *  - Listing of all users is disallowed.
 * @denormalization_for_authorization Accident reports store the userId to simplify ownership checks.
 * @structural_segregation Public user profiles are stored separately from any potentially private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (get) User with UID 'user123' can read their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get) User with UID 'user456' cannot read profile 'user123'.
     * @deny (update) User with UID 'user456' cannot update profile 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete profile 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Controls access to accident report documents. Reports are publicly readable, but only the owner can create, update, or delete them.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read an accident report.
     * @allow (list) Any user can list accident reports.
     * @allow (create) User with UID 'user123' can create an accident report with userId 'user123'.
     * @allow (update) User with UID 'user123' can update an accident report they own.
     * @allow (delete) User with UID 'user123' can delete an accident report they own.
     * @deny (create) User with UID 'user456' cannot create an accident report with userId 'user123'.
     * @deny (update) User with UID 'user456' cannot update an accident report owned by 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete an accident report owned by 'user123'.
     * @principle Allows public read access but restricts write access to the owner.
     */
    match /accident_reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to admin location documents. These are publicly readable and writable by anyone.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read an admin location.
     * @allow (list) Any user can list admin locations.
     * @allow (create) Any user can create an admin location.
     * @allow (update) Any user can update an admin location.
     * @allow (delete) Any user can delete an admin location.
     * @principle Provides free access.
     */
    match /admin_locations/{locationId} {
       allow get, list, create, update, delete: if true;
    }
  }
}