/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes ease of iteration during the prototyping phase.
 * It enforces basic authentication and authorization but relaxes data validation.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles. Accessible only to the user themselves.
 * - `/accident_reports/{reportId}`: Stores user-submitted accident reports. Public read, owner-only write.
 * - `/admin_locations/{locationId}`: Stores admin-curated accident locations. Public read, owner-only write.
 *
 * Key Security Decisions:
 * - User listing is denied to protect user privacy.
 * - Relaxed data validation to allow for rapid schema changes. Only validates fields
 *   critical for authorization.
 *
 * Denormalization for Authorization:
 *  - AccidentReport documents require the userId field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with uid 'user123' can create their profile document with matching uid.
     * @allow (get, list) - User with uid 'user123' can read their own profile document.
     * @allow (update) - User with uid 'user123' can update their own profile document.
     * @allow (delete) - User with uid 'user123' can delete their own profile document.
     * @deny (create) - User with uid 'user456' cannot create a profile document for 'user123'.
     * @deny (get, list) - User with uid 'user456' cannot read profile document of 'user123'.
     * @principle Enforces document ownership; users can only manage their own profile.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to accident report documents. Public read, owner-only write.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Any user can read accident reports.
     * @allow (create) - User with uid 'user123' can create an accident report with userId 'user123'.
     * @allow (update) - User with uid 'user123' can update an accident report with userId 'user123'.
     * @allow (delete) - User with uid 'user123' can delete an accident report with userId 'user123'.
     * @deny (create) - User with uid 'user456' cannot create an accident report with userId 'user123'.
     * @deny (update) - User with uid 'user456' cannot update an accident report with userId 'user123'.
     * @deny (delete) - User with uid 'user456' cannot delete an accident report with userId 'user123'.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /accident_reports/{reportId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Controls access to admin-curated location documents. Public read, owner-only write.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Any user can read admin locations.
     * @allow (create) - User with uid 'user123' can create an admin location.
     * @allow (update) - User with uid 'user123' can update an admin location.
     * @allow (delete) - User with uid 'user123' can delete an admin location.
     * @deny (create) - User with uid 'user456' cannot create an admin location.
     * @deny (update) - User with uid 'user456' cannot update an admin location.
     * @deny (delete) - User with uid 'user456' cannot delete an admin location.
     * @principle Allows public read access while restricting write access to the owner.
     */
    match /admin_locations/{locationId} {
       function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isSignedIn() && resource != null; // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isSignedIn() && resource != null;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}