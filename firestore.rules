/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a user-ownership model for user profiles,
 * while allowing public read access to accident reports and admin-curated locations.
 * Write access to accident reports is restricted to authenticated users,
 * and write access to admin-curated locations is not explicitly defined, defaulting to none.
 * @data_structure
 * - /users/{userId}: Stores public user profiles, accessible only to the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports, publicly readable but writable only by authenticated users.
 * - /admin_locations/{locationId}: Stores admin-curated locations, read-only for all.
 * @key_security_decisions
 * - User profiles are strictly owned and controlled by each user.
 * - Accident reports are publicly readable to facilitate information sharing, but creation/modification is restricted.
 * - Listing of user documents is allowed to make it easier to build clients.
 * @denormalization_for_authorization N/A
 * @structural_segregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile.
     * @allow (list) - Any user can list user documents.
     * @allow (update) - User with UID 'user123' can update their profile.
     * @allow (delete) - User with UID 'user123' can delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (update) - User with UID 'user456' cannot update the profile of 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to accident report documents.
     * @path /accident_reports/{reportId}
     * @allow (get) - Any user can read an accident report.
     * @allow (list) - Any user can list accident reports.
     * @allow (create) - User with UID 'user123' can create a report.
     * @deny (update) - User with UID 'user123' cannot update an accident report without custom claim.
     * @deny (delete) - User with UID 'user123' cannot delete an accident report without custom claim.
     * @principle Allows public read access but restricts write access to authenticated users.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if false;
    }

    /**
     * @description Controls access to admin curated location documents.
     * @path /admin_locations/{locationId}
     * @allow (get) - Any user can read an admin location.
     * @allow (list) - Any user can list admin locations.
     * @deny (create) - No one can create an admin location by default.
     * @deny (update) - No one can update an admin location by default.
     * @deny (delete) - No one can delete an admin location by default.
     * @principle Allows public read access but restricts write access (default deny).
     */
    match /admin_locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}