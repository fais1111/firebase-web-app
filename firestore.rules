/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization and assumes that all data
 * requires authentication to write, and most data is publicly readable.
 * It implements owner-only access for user profiles and public read access with
 * owner-only writes for accident reports, admin locations and accident guides.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only by the user.
 * - /accident_reports/{reportId}: Stores accident reports, publicly readable, but writable only with correct ownership.
 * - /admin_locations/{locationId}: Stores accident locations, publicly readable, but writable only with correct ownership.
 * - /accident_guides/{guideId}: Stores accident guides, publicly readable, but writable only with correct ownership.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy and prevent enumeration.
 * - Public read access is enabled on the /accident_reports, /admin_locations and /accident_guides collections to allow open access to accident data and guides.
 * - Owner-only write access is enforced on all write operations to prevent unauthorized modifications.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles with owner-only access.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile with matching userId in the document.
     * @deny (create) User with UID 'user456' cannot create a profile under /users/user123.
     * @allow (get, list, update, delete) User with UID 'user123' can read and modify their own profile at /users/user123.
     * @deny (get, list, update, delete) User with UID 'user456' cannot access or modify /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Access control function: isOwner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Explicitly prevent listing
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Accident reports are publicly readable, but write access is restricted to the owner.
     * @path /accident_reports/{reportId}
     * @allow (get, list) Any user can read accident reports.
     * @allow (create) User with UID 'user123' can create an accident report with 'userId: user123'.
     * @deny (create) User with UID 'user123' cannot create an accident report with 'userId: user456'.
     * @allow (update, delete) User with UID 'user123' can update/delete their own report at /accident_reports/{reportId} if the report's userId matches.
     * @deny (update, delete) User with UID 'user456' cannot update/delete a report owned by 'user123'.
     * @principle Allows public read access while enforcing ownership for write operations.
     */
    match /accident_reports/{reportId} {
      // Verified identity
      function isSignedIn() {
        return request.auth != null;
      }

      // Access control function: isOwner
      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

     /**
      * @description Accident locations are publicly readable, but write access is restricted to the owner.
      * @path /admin_locations/{locationId}
      * @allow (get, list) Any user can read accident locations.
      * @deny (create, update, delete) No user can create, update, or delete locations without owner permissions. // TODO: Add owner validation once the schema is updated with an ownership field.
      * @principle Allows public read access while enforcing ownership for write operations.
      */
    match /admin_locations/{locationId} {
         // Verified identity
        function isSignedIn() {
            return request.auth != null;
        }

         // Access control function: isAdmin
        function isAdmin() {
            return request.auth.token.admin == true;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Accident guides are publicly readable, but create/update/delete access is restricted.
     * @path /accident_guides/{guideId}
     * @allow (get, list) Any user can read accident guides.
     * @deny (create) User cannot create guides without authorization.
     * @deny (update, delete) User cannot update or delete guides without authorization.
     * @principle Allows public read access while enforcing ownership for write operations.
     */
    match /accident_guides/{guideId} {
         // Verified identity
        function isSignedIn() {
            return request.auth != null;
        }

         // Access control function: isAdmin
        function isAdmin() {
            return request.auth.token.admin == true;
        }

        allow get, list: if true;
        allow create: if isSignedIn() && isAdmin();
        allow update: if isSignedIn() && isAdmin();
        allow delete: if isSignedIn() && isAdmin();
    }
  }
}