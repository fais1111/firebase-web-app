rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Users can only access their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID 'user_abc' can create their own profile at /users/user_abc.
     * @deny (create) User with UID 'user_abc' cannot create a profile at /users/user_xyz.
     * @allow (get) User with UID 'user_abc' can read their own profile at /users/user_abc.
     * @deny (get) User with UID 'user_abc' cannot read profile at /users/user_xyz.
     * @allow (update) User with UID 'user_abc' can update their own profile at /users/user_abc.
     * @deny (update) User with UID 'user_abc' cannot update profile at /users/user_xyz.
     * @allow (delete) User with UID 'user_abc' can delete their own profile at /users/user_abc.
     * @deny (delete) User with UID 'user_abc' cannot delete profile at /users/user_xyz.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is generally not desired.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Manages accident reports.  Reports are publicly readable, but only the owner can modify/delete.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read any accident report.
     * @allow (list) Any user can list accident reports.
     * @allow (create) User with UID 'user_abc' can create an accident report with userId 'user_abc'.
     * @deny (create) User with UID 'user_abc' cannot create an accident report with userId 'user_xyz'.
     * @allow (update) User with UID 'user_abc' can update an accident report where resource.data.userId == 'user_abc'.
     * @deny (update) User with UID 'user_abc' cannot update an accident report where resource.data.userId != 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete an accident report where resource.data.userId == 'user_abc'.
     * @deny (delete) User with UID 'user_abc' cannot delete an accident report where resource.data.userId != 'user_abc'.
     * @principle Allows public reads with owner-only writes.
     */
    match /accident_reports/{reportId} {
      function isOwner() {
        return request.auth.uid == get(/databases/$(database)/documents/accident_reports/$(reportId)).data.userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    /**
     * @description Manages administrator curated locations.  Locations are publicly readable, but only the creator can modify/delete.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read any admin location.
     * @allow (list) Any user can list admin locations.
     * @allow (create) User with UID 'user_abc' can create an admin location. // Assuming some kind of ownership or admin role.
     * @deny (create) User with UID 'user_abc' cannot create an admin location if not an admin.
     * @allow (update) User with UID 'user_abc' can update an admin location.  // Assuming some kind of ownership or admin role.
     * @deny (update) User with UID 'user_abc' cannot update an admin location if not the owner/admin.
     * @allow (delete) User with UID 'user_abc' can delete an admin location.  // Assuming some kind of ownership or admin role.
     * @deny (delete) User with UID 'user_abc' cannot delete an admin location if not the owner/admin.
     * @principle Allows public reads with owner-only writes.
     */
    match /admin_locations/{locationId} {
      function isAdmin() {
          // Implement your admin check logic here.  This is a placeholder.
          // For example, check if the user's UID is in a list of admins,
          // or if they have a specific claim.
          return false;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Manages accident guides. Guides are publicly readable, but only the creator can modify/delete.
     * @path /accident_guides/{guideId}
     * @allow (get) Any user can read any accident guide.
     * @allow (list) Any user can list accident guides.
     * @allow (create) User with UID 'user_abc' can create an accident guide. // Assuming some kind of ownership or admin role.
     * @deny (create) User with UID 'user_abc' cannot create an accident guide if not an admin.
     * @allow (update) User with UID 'user_abc' can update an accident guide.  // Assuming some kind of ownership or admin role.
     * @deny (update) User with UID 'user_abc' cannot update an accident guide if not the owner/admin.
     * @allow (delete) User with UID 'user_abc' can delete an accident guide.  // Assuming some kind of ownership or admin role.
     * @deny (delete) User with UID 'user_abc' cannot delete an accident guide if not the owner/admin.
     * @principle Allows public reads with owner-only writes.
     */
    match /accident_guides/{guideId} {
      function isAdmin() {
          // Implement your admin check logic here.  This is a placeholder.
          // For example, check if the user's UID is in a list of admins,
          // or if they have a specific claim.
          return false;
      }

      function isSignedIn() {
          return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
  }
}