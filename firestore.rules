/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to accident reports, admin locations, and accident guides.
 * Writes to accident reports are restricted to authenticated users.
 * Admin locations and accident guides are not writable through the client.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /accident_reports/{reportId}: Stores user-submitted accident reports.
 * - /admin_locations/{locationId}: Stores locations added by admins.
 * - /accident_guides/{guideId}: Stores accident guides.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Accident reports are publicly readable but writable only by authenticated users.
 * - Listing of user documents is disallowed.
 * - Admin locations and accident guides are read-only for clients.
 *
 * Denormalization for Authorization:
 * - Accident Reports: `userId` is used for associating reports with users.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user's UID matches the document ID.
     *   Example: User with UID 'user123' can read/write document 'users/user123'.
     * @deny (get, create, update, delete) if the user's UID does not match the document ID.
     *   Example: User with UID 'user123' cannot read/write document 'users/user456'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      // Read rules
      allow get: if isOwner(userId);
      allow list: if false;

      // Write rules
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read accident reports, but only authenticated users can create them.
     * @path /accident_reports/{reportId}
     * @allow (get, list) to everyone.
     *   Example: Any user can read or list accident reports.
     * @allow (create) if the user is authenticated and the userId matches the user's UID.
     *   Example: A user with UID 'user123' can create a report with userId 'user123'.
     * @deny (create) if the user is not authenticated or the userId does not match the user's UID.
     *   Example: An unauthenticated user cannot create a report.
     *   Example: A user with UID 'user123' cannot create a report with userId 'user456'.
     * @deny (update, delete) to everyone.
     *   Example: No one can update or delete accident reports through the client.
     * @principle Public read access with authenticated user writes.
     */
    match /accident_reports/{reportId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read admin locations, but no one can write them through the client.
     * @path /admin_locations/{locationId}
     * @allow (get, list) to everyone.
     *   Example: Any user can read or list admin locations.
     * @deny (create, update, delete) to everyone.
     *   Example: No one can create, update, or delete admin locations through the client.
     * @principle Public read access with no client writes.
     */
    match /admin_locations/{locationId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read accident guides, but no one can write them through the client.
     * @path /accident_guides/{guideId}
     * @allow (get, list) to everyone.
     *   Example: Any user can read or list accident guides.
     * @deny (create, update, delete) to everyone.
     *   Example: No one can create, update, or delete accident guides through the client.
     * @principle Public read access with no client writes.
     */
    match /accident_guides/{guideId} {
      // Read rules
      allow get, list: if true;

      // Write rules
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}