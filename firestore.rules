/**
 * @file Firebase Security Rules for the application.
 *
 * @core_philosophy This ruleset enforces a combination of user-owned data and publicly accessible data with restricted write access.
 *
 * @data_structure
 * - `/users/{userId}`: Stores public user profiles, accessible only to the owner.
 * - `/accident_reports/{reportId}`: Stores user-submitted accident reports, publicly accessible for reading, owner only for edits.
 * - `/admin_locations/{locationId}`: Stores curated accident locations, publicly accessible.
 * - `/accident_guides/{guideId}`: Stores accident management guides, publicly accessible.
 *
 * @key_security_decisions
 * - User listing is disabled.
 * - The `accident_reports` collection uses a public-read, owner-write pattern.
 * - Data validation is relaxed in this prototyping phase to facilitate rapid iteration.
 * - The `accident_guides` collection uses a public-read, owner-write pattern.
 *
 * @denormalization_for_authorization
 * - The `AccidentReport` entity requires a `userId` field to enforce ownership.
 * - The `AccidentGuide` entity requires a `title` field to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for user 'user123'.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isSignedIn() && isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to accident reports. Public read, owner writes.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read an accident report.
     * @allow (list) Any user can list accident reports.
     * @allow (create) User with ID 'user123' can create an accident report with userId: 'user123'.
     * @allow (update) User with ID 'user123' can update their own accident report.
     * @allow (delete) User with ID 'user123' can delete their own accident report.
     * @deny (create) User with ID 'user456' cannot create an accident report with userId: 'user123'.
     * @deny (update) User with ID 'user456' cannot update the accident report of user 'user123'.
     * @principle Enforces owner-only writes for accident reports.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return resource.data.userId == request.auth.uid;
      }

      function isNewOwner() {
        return request.resource.data.userId == request.auth.uid;
      }

      function isExistingOwner() {
        return isSignedIn() && isOwner() && exists(resource);
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isNewOwner();
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to admin-curated locations.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read an admin location.
     * @allow (list) Any user can list admin locations.
     * @deny (create) No user can create an admin location through client.
     * @deny (update) No user can update an admin location through client.
     * @deny (delete) No user can delete an admin location through client.
     * @principle Restricts modification of admin-curated data.
     */
    match /admin_locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to accident guides. Public read, owner writes.
     * @path /accident_guides/{guideId}
     * @allow (get) Any user can read an accident guide.
     * @allow (list) Any user can list accident guides.
     * @allow (create) TODO: After schema is updated with an ownerId field.
     * @allow (update) TODO: After schema is updated with an ownerId field.
     * @allow (delete) TODO: After schema is updated with an ownerId field.
     * @deny (create) TODO: After schema is updated with an ownerId field.
     * @deny (update) TODO: After schema is updated with an ownerId field.
     * @principle Enforces owner-only writes for accident guides.
     */
    match /accident_guides/{guideId} {
        function isSignedIn() {
          return request.auth != null;
        }

        function isOwner() {
          return resource.data.ownerId == request.auth.uid;
        }

        function isNewOwner() {
          return request.resource.data.ownerId == request.auth.uid;
        }

        function isExistingOwner() {
            return isSignedIn() && isOwner() && exists(resource);
        }

        allow get: if true;
        allow list: if true;
        allow create: if isSignedIn() && isNewOwner(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow update: if isExistingOwner(); // TODO: Add owner validation once the schema is updated with an ownership field.
        allow delete: if isExistingOwner(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}