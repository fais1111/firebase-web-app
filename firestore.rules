/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization while relaxing data validation.
 * It enforces a user-ownership model for user profiles and allows public read access to accident reports and admin locations,
 * but restricts modifications to accident reports to the owner only.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports, publicly readable but writable only by the report owner.
 * - /admin_locations/{locationId}: Stores administrator-curated locations, publicly readable but with restricted write access (currently disabled in this prototype).
 *
 * Key Security Decisions:
 * - User profiles are private and only accessible to the respective user.
 * - Accident reports and admin locations are publicly readable.
 * - Data validation is minimized to allow for schema iteration during prototyping.
 *
 * Denormalization for Authorization:
 * - Accident reports include the userId to enforce owner-only write access.
 *
 * Structural Segregation:
 * - Public data (accident reports, admin locations) and private data (user profiles) are stored in separate top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile.
     *   `request.auth.uid == 'user_abc'` and `request.resource.data.uid == 'user_abc'`
     * @allow (get, list) - User with UID 'user_abc' can read their own profile.
     *   `request.auth.uid == 'user_abc'`
     * @allow (update, delete) - User with UID 'user_abc' can update/delete their own profile.
     *   `request.auth.uid == 'user_abc'`
     * @deny (create) - User with UID 'user_def' cannot create a profile for 'user_abc'.
     *   `request.auth.uid == 'user_def'` and `request.resource.data.uid == 'user_abc'`
     * @deny (get, list) - User with UID 'user_def' cannot read the profile of 'user_abc'.
     *   `request.auth.uid == 'user_def'`
     * @deny (update, delete) - User with UID 'user_def' cannot update/delete the profile of 'user_abc'.
     *   `request.auth.uid == 'user_def'`
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow a user to create their own profile if the userId matches their auth UID.
      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      // Allow a user to get their own profile.
      allow get: if isOwner(userId);
      // Allow a user to list profiles (for now, only the owner can list their own).
      allow list: if isOwner(userId);
      // Allow a user to update their own profile. Immutable uid.
      allow update: if isOwner(userId) && resource.data.uid == request.resource.data.uid && resource != null;
      // Allow a user to delete their own profile, but only if it exists.
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to accident reports, but restricts modifications to the report owner.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Any user can read accident reports.
     *   `true`
     * @allow (create) - User with UID 'user_abc' can create an accident report with `userId: 'user_abc'`.
     *   `request.auth.uid == 'user_abc'` and `request.resource.data.userId == 'user_abc'`
     * @allow (update, delete) - User with UID 'user_abc' can update/delete an accident report they own.
     *   `request.auth.uid == 'user_abc'` and `resource.data.userId == 'user_abc'`
     * @deny (create) - User with UID 'user_def' cannot create an accident report with `userId: 'user_abc'`.
     *   `request.auth.uid == 'user_def'` and `request.resource.data.userId == 'user_abc'`
     * @deny (update, delete) - User with UID 'user_def' cannot update/delete an accident report owned by 'user_abc'.
     *   `request.auth.uid == 'user_def'` and `resource.data.userId == 'user_abc'`
     * @principle Allows public read access with owner-only writes.
     */
    match /accident_reports/{reportId} {
      // Helper function to check if the authenticated user is the owner of the accident report.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Allow anyone to read accident reports.
      allow get, list: if true;

      // Allow creating an accident report if the userId matches the authenticated user's UID.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;

      // Allow updates and deletes only by the owner.
      allow update: if isOwner(resource.data.userId) && resource != null;
      allow delete: if isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Allows public read access to admin locations, but restricts modifications to administrators (currently disabled).
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Any user can read admin locations.
     *   `true`
     * @deny (create, update, delete) - No user can create, update, or delete admin locations.
     *   `false`
     * @principle Allows public read access with restricted writes.
     */
    match /admin_locations/{locationId} {
      // Allow anyone to read admin locations.
      allow get, list: if true;

      // Disallow creation, update, and deletion for now.
      allow create, update, delete: if false; // TODO: Implement admin role check for writes.
    }
  }
}