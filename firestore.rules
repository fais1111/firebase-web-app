/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes developer iteration speed by focusing on strict
 * authorization and omitting most data validation. It enforces a user-ownership
 * model for user-specific data and allows public read access where appropriate,
 * while restricting write access to authorized users. Data shape is NOT validated.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Access is restricted to the owning user.
 * - /accident_reports/{reportId}: Stores accident reports.
 *   Write access is denied by default.
 * - /admin_locations/{locationId}: Stores locations added by admins. Write access is denied by default.
 * - /accident_guides/{guideId}: Stores accident guides. Write access is denied by default.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent data scraping.
 * - Read-only collections are explicitly defined and allow public read access.
 * - The default security posture is strict: all write operations must be
 *   explicitly allowed via an authorization check.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, restricting access to the owning user.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123.
     * @allow (get, list) - User with UID 'user123' can read their own profile at /users/user123.
     * @allow (update) - User with UID 'user123' can update their own profile at /users/user123.
     * @allow (delete) - User with UID 'user123' can delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, list) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Stores accident reports submitted by users.  Write access is denied, pending requirements.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Allow public access
     * @deny (create) - Anyone cannot create accident reports because there is no rule for creating
     * @deny (update) - Anyone cannot update accident reports because there is no rule for updating
     * @deny (delete) - Anyone cannot delete accident reports because there is no rule for deleting
     * @principle Secure by default: write access is explicitly denied.
     */
    match /accident_reports/{reportId} {
      allow get, list: if true; // Public read access

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores locations added by administrators. Write access is denied, pending requirements.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Allow public access
     * @deny (create) - Anyone cannot create admin locations because there is no rule for creating
     * @deny (update) - Anyone cannot update admin locations because there is no rule for updating
     * @deny (delete) - Anyone cannot delete admin locations because there is no rule for deleting
     * @principle Secure by default: write access is explicitly denied.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true; // Public read access

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Stores accident guides. Write access is denied, pending requirements.
     * @path /accident_guides/{guideId}
     * @allow (get, list) - Allow public access
     * @deny (create) - Anyone cannot create accident guides because there is no rule for creating
     * @deny (update) - Anyone cannot update accident guides because there is no rule for updating
     * @deny (delete) - Anyone cannot delete accident guides because there is no rule for deleting
     * @principle Secure by default: write access is explicitly denied.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true; // Public read access

      // TODO: Add owner validation once the schema is updated with an ownership field.
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}