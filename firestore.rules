/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a basic security model, focusing on user-owned data and public read access where appropriate.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports, publicly readable, but writable only with the correct userId.
 * - /admin_locations/{locationId}: Stores curated location data, publicly readable. Writes are not handled and thus blocked.
 * - /accident_guides/{guideId}: Stores accident guides, publicly readable. Writes are not handled and thus blocked.
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the user.
 * - Listing of users is not allowed.
 * - Accident reports are readable by anyone but can only be created with a matching user id.
 * - Admin locations and accident guides are publicly readable, but write operations are disabled as no write permissions are defined.
 *
 * Denormalization for Authorization:
 * - The `AccidentReport` entity requires the `userId` field to match `request.auth.uid` on create, update and delete.
 *   This allows us to avoid complex queries to verify ownership.
 *
 * Structural Segregation:
 * - No explicit structural segregation is present in this model.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with uid 'user123' creates their profile.
     * @allow (get) User with uid 'user123' reads their profile.
     * @allow (update) User with uid 'user123' updates their profile.
     * @allow (delete) User with uid 'user123' deletes their profile.
     * @deny (create) User with uid 'user456' tries to create a profile for 'user123'.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to accident reports.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read an accident report.
     * @allow (list) Any user can list accident reports.
     * @allow (create) User with uid 'user123' creates an accident report with userId 'user123'.
     * @allow (update) User with uid 'user123' updates an accident report with userId 'user123'.
     * @allow (delete) User with uid 'user123' deletes an accident report with userId 'user123'.
     * @deny (create) User with uid 'user123' tries to create an accident report with userId 'user456'.
     * @principle Allows public read access, enforces document ownership for writes.
     */
    match /accident_reports/{reportId} {
      function isReportOwner() {
        return request.auth != null && resource.data.userId == request.auth.uid;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.auth != null;
      allow update: if isReportOwner();
      allow delete: if isReportOwner();
    }

    /**
     * @description Controls access to admin-curated locations.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read a location.
     * @allow (list) Any user can list locations.
     * @deny (create) No one can create new locations through the client.
     * @principle Allows public read access, restricts write access.
     */
    match /admin_locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to accident guides.
     * @path /accident_guides/{guideId}
     * @allow (get) Any user can read an accident guide.
     * @allow (list) Any user can list accident guides.
     * @deny (create) No one can create new guides through the client.
     * @principle Allows public read access, restricts write access.
     */
    match /accident_guides/{guideId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}