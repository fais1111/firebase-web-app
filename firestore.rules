/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to accident reports and admin locations, with owner-only
 * write access for accident reports.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports. Readable by everyone, but only the user who created the report can modify or delete it.
 * - /admin_locations/{locationId}: Stores accident hotspots curated by administrators. Public read access, write access is not handled in these rules.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Anyone can read accident reports, but only the owner can modify them.
 * - Listing of users is disallowed for privacy reasons.
 *
 * Denormalization for Authorization:
 * - Accident reports include the `userId` to authorize updates and deletes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'jcQlCDKhymRLjV2gJjgAN7bXAzi2' can create their profile.
     * @allow (get, update, delete) - User 'jcQlCDKhymRLjV2gJjgAN7bXAzi2' can read, update, or delete their own profile.
     * @deny (create) - User 'otherUser' cannot create a profile with userId 'jcQlCDKhymRLjV2gJjgAN7bXAzi2'.
     * @deny (get, update, delete) - User 'otherUser' cannot read, update, or delete the profile of user 'jcQlCDKhymRLjV2gJjgAN7bXAzi2'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId) && request.auth.uid == userId;
    }

    /**
     * @description Manages access to accident reports. Public read, owner-only write.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Anyone can read accident reports.
     * @allow (create) - User 'jcQlCDKhymRLjV2gJjgAN7bXAzi2' can create an accident report with their userId.
     * @allow (update, delete) - User 'jcQlCDKhymRLjV2gJjgAN7bXAzi2' can update/delete their own accident report.
     * @deny (create) - User 'jcQlCDKhymRLjV2gJjgAN7bXAzi2' cannot create a report with a different userId.
     * @deny (update, delete) - User 'otherUser' cannot update/delete the accident report of user 'jcQlCDKhymRLjV2gJjgAN7bXAzi2'.
     * @principle Allows public read access with owner-only writes, enforces document ownership.
     */
    match /accident_reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId) && resource.data.userId == request.auth.uid;
    }

    /**
     * @description Manages access to admin locations. Public read. Write access is not defined, and should be managed by admins.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Anyone can read admin locations.
     * @deny (create, update, delete) - No one can create, update, or delete admin locations through the client.  These operations should be performed via a trusted environment.
     * @principle Allows public read access, restricts write access.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}