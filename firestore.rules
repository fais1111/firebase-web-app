/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict authorization. It focuses on preventing unauthorized data access and modification while allowing for flexible data shapes during prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the respective user.
 * - /accident_reports/{reportId}: Stores accident reports, publicly readable but writable only with valid ownership.
 * - /admin_locations/{locationId}: Stores admin-curated locations, publicly readable. Writes are not explicitly secured in this prototype (TODO: Add admin role check).
 * - /accident_guides/{guideId}: Stores accident guides, publicly readable. Writes are not explicitly secured in this prototype (TODO: Add admin role check).
 *
 * Key Security Decisions:
 * - User profiles are strictly owned and controlled by the respective user.
 * - Accident reports are publicly readable to encourage community awareness but writable only by the correct owner.
 * - Listing of user documents (`/users`) is denied to prevent data harvesting.
 * - The rules do NOT validate the complete schema of data being written, allowing for rapid iteration on the data model. However, ownership fields are validated on creation and updates to maintain authorization.
 *
 * Denormalization for Authorization:
 * - Accident reports require a `userId` field to match `request.auth.uid` for write operations.
 *
 * Structural Segregation:
 * - Public accident reports are stored in a top-level collection (`/accident_reports`) separate from user-private data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) User with matching UID can read, update, and delete their own profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, list, update, delete) User cannot access or modify another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to accident report documents.
     * @path /accident_reports/{reportId}
     * @allow (get, list) Any user can read accident reports.
     * @allow (create) User can create an accident report if the userId matches their UID.
     * @allow (update, delete) Only the owner can update or delete their accident report.
     * @deny (create) User cannot create an accident report with a mismatched userId.
     * @deny (update, delete) User cannot update or delete an accident report they don't own.
     * @principle Public read access with owner-only writes, enforcing ownership on create and updates.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner() {
        return request.auth.uid == resource.data.userId;
      }

       function isCreatingWithOwnerId() {
        return request.auth.uid == request.resource.data.userId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner();
      allow delete: if isSignedIn() && isOwner();
    }

    /**
     * @description Controls access to admin location documents.
     * @path /admin_locations/{locationId}
     * @allow (get, list) Any user can read admin locations.
     * @allow (create, update, delete) if false; // TODO: Add admin role validation
     * @principle Public read access with restricted writes (TODO: Implement admin role check).
     */
    match /admin_locations/{locationId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }

    /**
     * @description Controls access to accident guide documents.
     * @path /accident_guides/{guideId}
     * @allow (get, list) Any user can read accident guides.
     * @allow (create, update, delete) if false; // TODO: Add admin role validation
     * @principle Public read access with restricted writes (TODO: Implement admin role check).
     */
    match /accident_guides/{guideId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin role validation
      allow update: if false; // TODO: Add admin role validation
      allow delete: if false; // TODO: Add admin role validation
    }
  }
}