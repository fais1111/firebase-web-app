/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and data access control. It assumes a mix of public and private data.
 * Data access is based on user ownership where applicable. The rules are designed to be strict by default.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports, writable by any authenticated user and readable by anyone.
 * - /admin_locations/{locationId}: Stores accident hotspots, readable by anyone.
 * - /accident_guides/{guideId}: Stores accident management guides, readable by anyone.
 *
 * Key Security Decisions:
 * - Listing of users is disallowed.
 * - Public read access is granted to accident reports, admin locations, and accident guides.
 * - All write operations require user authentication.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile.
     * @deny (create) - User with UID 'user456' cannot create a profile for 'user123'.
     * @deny (update, delete) - User with UID 'user456' cannot update or delete 'user123' profile.
     * @principle Enforces strict user ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to accident report documents.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Anyone can read accident reports.
     * @allow (create) - User with UID 'user123' can create a report.
     * @allow (update, delete) - Only the user who created the report can update/delete it.
     * @deny (create) - Unauthenticated user cannot create a report.
     * @deny (update, delete) - User with UID 'user456' cannot update/delete a report created by 'user123'.
     * @principle Allows public reads, enforces ownership for writes.
     */
    match /accident_reports/{reportId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid && resource != null;
    }

    /**
     * @description Controls access to admin location documents.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Anyone can read admin locations.
     * @deny (create, update, delete) - No one can create, update, or delete admin locations.
     * @principle Allows public reads, restricts writes completely.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to accident guide documents.
     * @path /accident_guides/{guideId}
     * @allow (get, list) - Anyone can read accident guides.
     * @deny (create, update, delete) - No one can create, update, or delete accident guides.
     * @principle Allows public reads, restricts writes completely.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return request.auth.uid == userId && resource != null;
  }
}