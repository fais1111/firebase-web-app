/**
 * @file Firebase Security Rules for the application.
 *
 * @corePhilosophy This ruleset prioritizes security by enforcing strict ownership and role-based access control. It assumes a public read / restricted write access pattern for accident reports and admin locations.
 * @dataStructure The data is organized into three top-level collections: `users`, `accident_reports`, and `admin_locations`. User profiles are stored under `/users/{userId}`, accident reports are stored under `/accident_reports/{reportId}`, and admin locations under `/admin_locations/{locationId}`.
 * @keySecurityDecisions
 *   - Users can only read their own profile data, and can only create their profile using their own UID.
 *   - Listing of users is disallowed to prevent data harvesting.
 *   - Accident reports are publicly readable, but creating, updating, and deleting reports is restricted to authenticated users who are the owners of the report.
 *   - Admin locations are publicly readable, but only administrators can create, update, and delete them. No admin role is yet defined, write access for admin locations is temporarily open.
 * @denormalizationForAuthorization To avoid costly `get()` operations, the `AccidentReport` entity contains a `userId` field to easily verify ownership.
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can get, update, and delete their own profile if the userId matches their auth UID.
     * @deny (list) - Listing all users is not allowed.
     * @deny (create, update, delete) - Any other user cannot create, update, or delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the user id matches the authenticated user id.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Function to check if the user id matches the authenticated user id. and that the resource exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to accident reports.
     * @path /accident_reports/{reportId}
     * @allow (get, list) - Anyone can read accident reports.
     * @allow (create) - Authenticated user can create an accident report with their user ID.
     * @allow (update, delete) - Authenticated user can update or delete their own accident report.
     * @deny (create, update, delete) -  Writes are forbidden if the user is not the owner.
     * @principle Allows public read access with owner-only writes for accident reports.
     */
    match /accident_reports/{reportId} {

      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      //Function to check if the accident report is owned by the user ID
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //Function to check if the user id matches the authenticated user id. and that the resource exists.
      function isExistingOwner() {
        return isSignedIn() && request.auth.uid == resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner();
      allow delete: if isExistingOwner();
    }

    /**
     * @description Controls access to admin locations.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Anyone can read admin locations.
     * // TODO: The current rules do not enforce admin-only access for writing to admin locations. Add role-based access control.
     * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
     * @principle Allows public read access. Write access is currently disabled and must be secured with an admin role.
     */
    match /admin_locations/{locationId} {

      //Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}