/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict authorization based on user identity and
 * document ownership while maintaining flexibility during the prototyping phase.
 * It enforces who can access what, but avoids strict data validation to
 * accelerate development.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles. Accessible only by the
 *   user themselves for write operations. Read access is currently denied.
 * - `/accident_reports/{reportId}`: Stores accident reports. Publicly readable,
 *   but write operations are restricted to the report's author.
 * - `/admin_locations/{locationId}`: Stores admin-curated locations. Publicly
 *   readable, but write access is not currently implemented and is open for public writes.
 *
 * Key Security Decisions:
 * - User listing is denied to prevent information disclosure.
 * - Public read access is granted to `/accident_reports` and `/admin_locations`
 *   for prototyping purposes. These should be audited before production.
 *
 * Denormalization for Authorization:
 * - The `AccidentReport` entity requires a `userId` field to enforce ownership.
 *   This allows for secure write rules without additional reads.
 *
 * Structural Segregation:
 * - User profiles are stored in a dedicated `/users/{userId}` collection,
 *   separate from other data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces document ownership for user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with UID 'user123' can create their profile.
     * @allow (update) User with UID 'user123' can update their profile.
     * @allow (delete) User with UID 'user123' can delete their profile.
     * @deny (create) User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (list) Any user cannot list all users.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isSignedIn() && isOwner(userId) && resource != null;
    }

    /**
     * @description Allows public read access to accident reports, but restricts write access to the report's author.
     * @path /databases/{database}/documents/accident_reports/{reportId}
     * @allow (get) Any user can read an accident report.
     * @allow (list) Any user can list accident reports.
     * @allow (create) User with UID 'user123' can create an accident report with userId 'user123'.
     * @allow (update) User with UID 'user123' can update their own accident report.
     * @allow (delete) User with UID 'user123' can delete their own accident report.
     * @deny (create) User with UID 'user456' cannot create an accident report with userId 'user123'.
     * @principle Allows public read access with owner-only writes.
     */
    match /accident_reports/{reportId} {
       function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
      allow delete: if isSignedIn() && isOwner(resource.data.userId) && resource != null;
    }

    /**
     * @description Allows public read and write access to admin locations for prototyping.
     * @path /databases/{database}/documents/admin_locations/{locationId}
     * @allow (get) Any user can read an admin location.
     * @allow (list) Any user can list admin locations.
     * @allow (create) Any user can create a admin location.
     * @allow (update) Any user can update a admin location.
     * @allow (delete) Any user can delete a admin location.
     */
    match /admin_locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}