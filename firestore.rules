/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict user-ownership model
 * for user-specific data and restricting write access to specific roles where
 * appropriate. Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the
 *   owning user for modification.
 * - /accident_reports/{reportId}: Stores accident reports. Public read, owner write.
 * - /admin_locations/{locationId}: Stores accident hotspots curated by administrators.
 *   Write access is not defined.  Default deny all write.
 * - /accident_guides/{guideId}: Stores accident management guides with YouTube
 *   links. Public read. Write access is not defined. Default deny all write.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent information harvesting.
 * - The rules explicitly deny write access to collections where write access is
 *   unspecified, ensuring a secure default posture.
 *
 * Denormalization for Authorization:
 * - The `AccidentReport` entity contains a `userId` field, which is used to
 *   enforce owner-only write access. This avoids the need for costly `get()`
 *   operations to determine ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the `uid` matches the document ID.
     * @allow (get, list) Authenticated user can read their own profile.
     * @allow (update, delete) Authenticated user can update or delete their own profile.
     * @deny (create) Authenticated user cannot create a profile with a mismatched `uid`.
     * @deny (get, list) Authenticated user cannot read other user profiles.
     * @deny (update, delete) Authenticated user cannot modify or delete other user profiles.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to accident reports.
     * @path /accident_reports/{reportId}
     * @allow (get, list) Any user can read accident reports.
     * @allow (create) Any authenticated user can create accident reports with a matching `userId`.
     * @allow (update, delete) Only the owner (the user who created the report) can update or delete it.
     * @deny (create) An unauthenticated user cannot create an accident report.
     * @deny (update, delete) A non-owner cannot update or delete an accident report.
     * @principle Allows public read access and owner-only write access.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isReportOwner() {
        return request.auth.uid == resource.data.userId;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isReportOwner();
    }

    /**
     * @description Controls access to administrator-curated locations.
     * @path /admin_locations/{locationId}
     * @allow (get, list) Any user can read admin locations.
     * @deny (create, update, delete) No user can create, update, or delete admin locations.
     * @principle Restricts write access to prevent unauthorized modifications.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
    }

    /**
     * @description Controls access to accident management guides.
     * @path /accident_guides/{guideId}
     * @allow (get, list) Any user can read accident guides.
     * @deny (create, update, delete) No user can create, update, or delete accident guides.
     * @principle Allows public read access but restricts write access.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
    }
  }
}