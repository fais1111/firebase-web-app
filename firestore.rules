/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a mix of user-owned data and public data with restricted write access.
 * User profiles are private and owned by each user. Accident reports are public for listing,
 * but creation is unrestricted. Admin locations and accident guides are intended to be managed
 * by administrators (though the exact mechanism for admin identification is not defined
 * and thus writes are currently denied).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Each user can only read/write their own profile.
 * - /accident_reports/{reportId}: Stores accident reports. Anyone can create, list but not get (read) or modify.
 * - /admin_locations/{locationId}: Stores admin-defined locations. Write access is currently denied.
 * - /accident_guides/{guideId}: Stores accident guides. Write access is currently denied.
 *
 * Key Security Decisions:
 * - User listing is disabled for security.
 * - Accident report creation is open for prototyping but should eventually be restricted.
 * - Administrator role management is not yet implemented. Rules for /admin_locations and
 *   /accident_guides are placeholders that deny all writes.
 *
 * Denormalization for Authorization:
 *  Not applicable here.
 *
 * Structural Segregation:
 *  Not applicable here.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that each user can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create, update, delete) if the user's UID matches the userId in the path.
     * @deny (create, update, delete) if the user's UID does not match the userId in the path.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to create accident reports, but restricts modifications and reads.
     * @path /accident_reports/{reportId}
     * @allow (create) any authenticated user.
     * @deny (get, update, delete) all requests.
     * @principle Allows public write with owner-only update and delete after schema update.
     */
    match /accident_reports/{reportId} {
      allow get: if false;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to admin locations.
     * @path /admin_locations/{locationId}
     * @allow (none) All operations are denied.
     * @principle Placeholder for administrator-only access.
     */
    match /admin_locations/{locationId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to accident guides.
     * @path /accident_guides/{guideId}
     * @allow (none) All operations are denied.
     * @principle Placeholder for administrator-only access.
     */
    match /accident_guides/{guideId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}