/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user profiles and allows any logged in user to create an accident report.
 * Admin locations are publicly readable and writable.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profiles, accessible only to the user themselves.
 * - `/accident_reports/{reportId}`: Stores accident reports. All users can create accident reports. Only the creator can edit.
 * - `/admin_locations/{locationId}`: Stores administrator-curated locations.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Accident reports can be created by any authenticated user, promoting community contribution.
 * - Administrator locations are publicly accessible, reflecting their role as shared data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete, list) if request.auth.uid == userId
     * @deny (get, list) if request.auth == null
     * @deny (create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {

      function isOwner(userId) {
          return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows any signed-in user to create an accident report. Users can only edit or delete their own reports.
     * @path /accident_reports/{reportId}
     * @allow (create) if request.auth != null && request.resource.data.userId == request.auth.uid
     * @allow (get, list) if true;
     * @allow (update, delete) if resource.data.userId == request.auth.uid
     * @deny (create) if request.auth == null
     * @deny (update, delete) if resource.data.userId != request.auth.uid
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /accident_reports/{reportId} {

      function isSignedIn() {
          return request.auth != null;
      }

      function isOwner(reportUserId) {
        return request.auth.uid == reportUserId;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isOwner(resource.data.userId);
      allow delete: if isSignedIn() && isOwner(resource.data.userId);
    }

    /**
     * @description Allows anyone to read and write admin locations.
     * @path /admin_locations/{locationId}
     * @allow (get, list, create, update, delete) if true
     * @principle Allows public read and write access.
     */
    match /admin_locations/{locationId} {
        allow get: if true;
        allow list: if true;
        allow create: if true;
        allow update: if true;
        allow delete: if true;
    }
  }
}