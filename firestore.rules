/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security and enforces a strict user-ownership model where applicable.
 * It defaults to denying access unless explicitly granted, focusing on who can access what, rather than rigidly enforcing data shapes.
 * This allows for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only to the owner.
 * - /accident_reports/{reportId}: Stores user-submitted accident reports, accessible only to authenticated users for creation, and not listable.
 * - /admin_locations/{locationId}: Stores accident locations added by admins, write-protected to prevent unauthorized modification.
 * - /accident_guides/{guideId}: Stores accident guides, write-protected to prevent unauthorized modification.
 *
 * Key Security Decisions:
 * - User listing is disallowed for `accident_reports`.
 * - Data validation is relaxed in favor of faster prototyping, focusing on authorization and relational integrity.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the user is the owner of the profile.
     * @deny (get, create, update, delete) if the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects accident reports. Only authenticated users can create reports. No listing is allowed.
     * @path /accident_reports/{reportId}
     * @allow (create) if the user is authenticated.
     * @deny (get, list, update, delete) to all users.
     * @principle Restricts creation to authenticated users and disallows listing for privacy.
     */
    match /accident_reports/{reportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects admin-curated location data. Only authenticated users can create, but other operations are disallowed
     * @path /admin_locations/{locationId}
     * @allow (create) if the user is authenticated.
     * @deny (get, list, update, delete) to all users.
     * @principle Prevents unauthorized modification of curated locations.
     */
    match /admin_locations/{locationId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects accident guide data. Only authenticated users can create, but other operations are disallowed
     * @path /accident_guides/{guideId}
     * @allow (create) if the user is authenticated.
     * @deny (get, list, update, delete) to all users.
     * @principle Prevents unauthorized modification of accident guides.
     */
    match /accident_guides/{guideId} {
       function isSignedIn() {
        return request.auth != null;
      }
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }
  }
}