/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict user-ownership model
 * for user profiles and restricting access to accident reports and admin locations.
 * It assumes a prototype stage where data shapes are fluid but authorization
 * must be rock-solid.  It uses explicit deny rules to enforce restrictions.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores public user profile information. Access is restricted to the owning user.
 * - `/accident_reports/{reportId}`: Stores accident reports. Write access is denied, read access is public.
 * - `/admin_locations/{locationId}`: Stores curated accident locations. Write access is denied, read access is public.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy and prevent enumeration attacks.
 * - Accident reports are publicly readable but not writable via the client.
 * - Admin locations are publicly readable but not writable via the client.
 * - The ruleset does NOT validate data shapes beyond ownership checks.
 *
 * Denormalization for Authorization:
 *  N/A - The data structure does not require denormalization at this time.
 *
 * Structural Segregation:
 * N/A - The app does not require structural segregation at this time.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for profiles.  Users can only read/write their own profile.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' creates their profile at /users/user123.
     * @deny (create) User with UID 'user123' attempts to create a profile at /users/user456.
     * @deny (update) User with UID 'user123' attempts to modify the profile at /users/user456.
     * @deny (delete) User with UID 'user123' attempts to delete the profile at /users/user456.
     * @principle Enforces document ownership for all operations.  Validates ID on create.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to accident reports, but denies all client-side writes.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read an accident report.
     * @allow (list) Any user can list accident reports.
     * @deny (create) Any user attempts to create an accident report.
     * @deny (update) Any user attempts to modify an accident report.
     * @deny (delete) Any user attempts to delete an accident report.
     * @principle Public read, no client-side writes.
     */
    match /accident_reports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to admin locations, but denies all client-side writes.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read an admin location.
     * @allow (list) Any user can list admin locations.
     * @deny (create) Any user attempts to create an admin location.
     * @deny (update) Any user attempts to modify an admin location.
     * @deny (delete) Any user attempts to delete an admin location.
     * @principle Public read, no client-side writes.
     */
    match /admin_locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create, update, delete: if false;
    }
  }
}