/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and public read access for accident guides and admin locations. Accident reports
 * have write access blocked.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profiles, accessible only by the user themselves.
 * - /accident_reports/{reportId}: Stores accident reports.  Write operations are denied.
 * - /admin_locations/{locationId}: Stores admin-curated accident locations, publicly readable,
 *   but write access is blocked.
 * - /accident_guides/{guideId}: Stores accident management guides, publicly readable,
 *   but write access is blocked.
 *
 * Key Security Decisions:
 * - User profiles are strictly private; only a user can read or write their own profile.
 * - Listing of user profiles is explicitly denied.
 * - Accident reports, admin locations and accident guides are publicly readable.
 * - Write operations are completely blocked for accident reports, admin locations, and accident guides.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get) Authenticated user can read their own profile if the userId matches their auth UID.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth UID.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth UID.
     * @deny (list) Listing user profiles is not allowed.
     * @deny (create) An unauthenticated user cannot create a profile.
     * @deny (update) A user cannot update another user's profile.
     * @deny (delete) A user cannot delete another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to accident reports. Write operations are blocked.
     * @path /accident_reports/{reportId}
     * @allow (get) Any user can read accident reports.
     * @allow (list) Any user can list accident reports.
     * @deny (create) No user can create accident reports through direct writes.
     * @deny (update) No user can update accident reports through direct writes.
     * @deny (delete) No user can delete accident reports through direct writes.
     * @principle Public read, no writes allowed.
     */
    match /accident_reports/{reportId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to admin locations. Write operations are blocked.
     * @path /admin_locations/{locationId}
     * @allow (get) Any user can read admin locations.
     * @allow (list) Any user can list admin locations.
     * @deny (create) No user can create admin locations through direct writes.
     * @deny (update) No user can update admin locations through direct writes.
     * @deny (delete) No user can delete admin locations through direct writes.
     * @principle Public read, no writes allowed.
     */
    match /admin_locations/{locationId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to accident guides. Write operations are blocked.
     * @path /accident_guides/{guideId}
     * @allow (get) Any user can read accident guides.
     * @allow (list) Any user can list accident guides.
     * @deny (create) No user can create accident guides through direct writes.
     * @deny (update) No user can update accident guides through direct writes.
     * @deny (delete) No user can delete accident guides through direct writes.
     * @principle Public read, no writes allowed.
     */
    match /accident_guides/{guideId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  // Helper Functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}