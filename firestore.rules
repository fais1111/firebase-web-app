/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict user-ownership and admin-only access where appropriate, while allowing flexible data shapes for rapid prototyping.
 * It ensures that users can only access their own data and that administrative data is protected.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.  Access is restricted to the owning user.
 * - /accident_reports/{reportId}: Stores accident reports submitted by users. Access is restricted to the report owner.
 * - /admin_locations/{locationId}: Stores curated accident locations added by administrators.
 * - /accident_guides/{guideId}: Stores accident management guides.
 *
 * Key Security Decisions:
 * - User listing is not allowed.
 * - The rules explicitly deny any potentially ambiguous or insecure access patterns.
 * - Data validation is limited to checks that are critical for authorization (e.g., ownership).
 *
 * Denormalization for Authorization:
 *  - Accident reports denormalize the `userId` to allow for direct ownership checks.
 *
 * Structural Segregation:
 *  - Public vs. private content is separated into different top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data.
     * @path /users/{userId}
     * @allow (create) - User with uid 'user_abc' can create their profile.
     *   Request: { "auth": { "uid": "user_abc" }, "resource": { "data": { "uid": "user_abc", "email": "test@example.com", "createdAt": "2024-01-01T00:00:00Z" } } }
     * @allow (get, list, update, delete) - User with uid 'user_abc' can read, update, and delete their profile.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @deny (create) - User with uid 'user_xyz' cannot create a profile for 'user_abc'.
     *   Request: { "auth": { "uid": "user_xyz" }, "resource": { "data": { "uid": "user_abc", "email": "test@example.com", "createdAt": "2024-01-01T00:00:00Z" } } }
     * @deny (get, list, update, delete) - User with uid 'user_xyz' cannot read, update, or delete the profile of 'user_abc'.
     *   Request: { "auth": { "uid": "user_xyz" } }
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(userId) && resource.data.uid == userId;
      allow delete: if isOwner(userId) && resource.data.uid == userId;
    }

    /**
     * @description Manages accident reports submitted by users.
     * @path /accident_reports/{reportId}
     * @allow (create) - User with uid 'user_abc' can create a report with userId 'user_abc'.
     *   Request: { "auth": { "uid": "user_abc" }, "resource": { "data": { "userId": "user_abc", "reportDate": "2024-01-01T00:00:00Z", "description": "Accident details", "locationDescription": "Location", "status": "reported" } } }
     * @allow (get, list, update, delete) - User with uid 'user_abc' can read, update, and delete their own report.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @deny (create) - User with uid 'user_xyz' cannot create a report with userId 'user_abc'.
     *   Request: { "auth": { "uid": "user_xyz" }, "resource": { "data": { "userId": "user_abc", "reportDate": "2024-01-01T00:00:00Z", "description": "Accident details", "locationDescription": "Location", "status": "reported" } } }
     * @deny (get, list, update, delete) - User with uid 'user_xyz' cannot read, update, or delete the report of 'user_abc'.
     *   Request: { "auth": { "uid": "user_xyz" } }
     * @principle Enforces document ownership for all operations.
     */
    match /accident_reports/{reportId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages accident locations curated by administrators.
     * @path /admin_locations/{locationId}
     * @allow (get, list) - Any user can read admin locations.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @deny (create, update, delete) - No user can create, update, or delete admin locations.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @principle Restricts writes to prevent unauthorized modifications.
     */
    match /admin_locations/{locationId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages accident management guides with YouTube links.
     * @path /accident_guides/{guideId}
     * @allow (get, list) - Any user can read accident guides.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @deny (create, update, delete) - No user can create, update, or delete accident guides.
     *   Request: { "auth": { "uid": "user_abc" } }
     * @principle Restricts writes to prevent unauthorized modifications.
     */
    match /accident_guides/{guideId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}